 Paweł here, a poniżej moje potrzeby xdd
 
Users Service
- List<BasicUser> findAll();
- BasicUser findByUsername(String username);
- boolean deleteByUsername(String username);
- boolean addUser(BasicUser bUser);
- boolean saveChangedUser(BasicUser bUser); //Do zmiany detali usera
 //Ewentualnie można zintegrować funkcję deleteByUsername
 //z saveChangedUser i zapisywać po prostu takiego, u którego
 //zmieniono status na inactive.

ProductOrders Service
- List<ProductOrder> findAllByTransportProvider (String transportProviderName);
- List<ProductOrder> findPendingByTransportProvider (String transportProviderName);
- ProductOrder findProductOrderByID (Long productOrderID);
- boolean saveChangedOrder (ProductOrder productOrder); //Do zmiany statusu


Zapotrzebowanie na backend - Justyna

public interface CityService {
    City FindCityByName(String name);
}

public interface ClientService {
    Client FindClientByName(String name);
    ServiceErrorCode ModifyClient(Client client);
}

public interface ProductOrderService {
    ProductOrder CreateOrder(ProductOrder order); //wysłanie zamówienia do bazy
    ServiceErrorCode ModifyOrder(ProductOrder order); //zmiana informacji w zamówieniu*/
    List<ProductOrder> FindCurrentOrders(); //pobranie wszystkich zamówień o danym statusie
    List<ProductOrder> FindHistoricOrders();
}

public interface OrderItemService {
    OrderItem CreateOrderItem(OrderItem orderItem);
    List<OrderItem> FindOrderItemsByOrder(long orderID);
}

public interface ProductService {
    List<Product> FindProductsByProductType(ProductType productType);
}

Piotr
public interface UserManagement{
	void addAccount(BasicUser newUser) //dodawanie konta użytkownika
	void deleteAccount(long userId) //usuwanie konta użytkownika
	boolean checkIfUserExists(String accountName, String userName) //sprawdzenie czy konto istnieje
}

public interface OrderManagement{
	void setFactoryForOrderItem(OrderItem actualOrderItem, Factory chosenFactory)
	void setTransportProviderForOrder(Order actualOrder, TransportProvider chosenProvider)
}

public interface OfferManagement{
	void sendOffer(Order actualOrder) //najważniejsza metoda - wysłanie zamówienia do dalszego przetwarzania
}

public interface OrderInformationRetrieval{
	List<ProductOrder>getAllOrders();
	List<OrderItem> getProductsForActualOrder(Order actualOrder)
	List<Factory> getPossibleFactories(OrderItem actualOrderItem)//lista fabryk w których można wyprodukować produkt z tego OrderItem
	List<TransportProvider> getTransportProvidersForOrder(Order actualOrder)
}
